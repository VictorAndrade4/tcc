{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/autocomplete\";\nimport * as i4 from \"@angular/material/core\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nfunction InputComponent_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", option_r2, \" \");\n  }\n}\nexport let InputComponent = /*#__PURE__*/(() => {\n  class InputComponent {\n    constructor(dataService) {\n      this.dataService = dataService;\n      this.control = new FormControl();\n      this.options = [];\n      this.name = '';\n      this.placeholder = '';\n      this.disabled = false;\n    }\n    ngOnInit() {\n      this.filteredOptions = this.control.valueChanges.pipe(startWith(''), map(value => this._filter(value)));\n    }\n    onCitySelection(city) {\n      this.dataService.city = city;\n    }\n    _filter(value) {\n      const filterValue = value.toLowerCase();\n      return this.options.filter(option => option.toLowerCase().includes(filterValue));\n    }\n    static #_ = this.ɵfac = function InputComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || InputComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: InputComponent,\n      selectors: [[\"app-input\"]],\n      inputs: {\n        options: \"options\",\n        name: \"name\",\n        placeholder: \"placeholder\",\n        disabled: \"disabled\"\n      },\n      decls: 8,\n      vars: 8,\n      consts: [[\"auto\", \"matAutocomplete\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"readonly\", \"placeholder\", \"formControl\", \"matAutocomplete\"], [3, \"optionSelected\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n      template: function InputComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"mat-form-field\")(1, \"mat-label\");\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"input\", 1);\n          i0.ɵɵelementStart(4, \"mat-autocomplete\", 2, 0);\n          i0.ɵɵlistener(\"optionSelected\", function InputComponent_Template_mat_autocomplete_optionSelected_4_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onCitySelection($event.option.value));\n          });\n          i0.ɵɵtemplate(6, InputComponent_mat_option_6_Template, 2, 2, \"mat-option\", 3);\n          i0.ɵɵpipe(7, \"async\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          const auto_r3 = i0.ɵɵreference(5);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.name);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"readonly\", ctx.disabled)(\"placeholder\", ctx.placeholder)(\"formControl\", ctx.control)(\"matAutocomplete\", auto_r3);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 6, ctx.filteredOptions));\n        }\n      },\n      dependencies: [i2.NgForOf, i3.MatAutocomplete, i4.MatOption, i3.MatAutocompleteTrigger, i5.DefaultValueAccessor, i5.NgControlStatus, i5.FormControlDirective, i6.MatInput, i7.MatFormField, i7.MatLabel, i2.AsyncPipe]\n    });\n  }\n  return InputComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}