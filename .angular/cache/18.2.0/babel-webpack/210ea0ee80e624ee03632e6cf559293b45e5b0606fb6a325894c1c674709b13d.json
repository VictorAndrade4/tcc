{"ast":null,"code":"import _asyncToGenerator from \"/mnt/c/Users/Victor/Documents/dev/tcc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_LAT, DEFAULT_LNG, DEFAULT_ZOOM } from '../../utils/const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nimport * as i2 from \"./map.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/progress-spinner\";\nimport * as i5 from \"@angular/material/expansion\";\nfunction MapComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"mat-spinner\", 4);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"Escolha uma cidade primeiro...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nlet map;\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(dataService, mapService) {\n      this.dataService = dataService;\n      this.mapService = mapService;\n      this.selectedAreas = [];\n      this.options = {\n        center: {\n          lat: DEFAULT_LAT,\n          lng: DEFAULT_LNG\n        },\n        zoom: DEFAULT_ZOOM,\n        disableDefaultUI: true\n      };\n      this.panelOpenState = false;\n      this.isLoading = false;\n      this.kmlPath = '';\n      this.apiLoaded = mapService.googleMapsApiLoaded();\n    }\n    ngOnInit() {\n      this.dataService.getCityObservable().subscribe(this.onCityChange.bind(this));\n      this.isLoading = true;\n    }\n    ngAfterViewInit() {\n      this.apiLoaded.subscribe(() => {\n        this.startNewMap(null);\n      });\n    }\n    startNewMap(layerUrl) {\n      if (layerUrl) {\n        this.loadGeoJsonMap(layerUrl);\n      }\n      map?.data.setStyle(feature => {\n        let color = 'gray';\n        if (feature.getProperty('isColorful')) color = 'blue';\n        return {\n          fillColor: color,\n          strokeColor: color,\n          strokeWeight: 5\n        };\n      });\n      map?.data.addListener('click', event => {\n        console.log(event.feature.getProperty('name'));\n        event.feature.setProperty('isColorful', true);\n        this.handleKmlClick(event);\n      });\n    }\n    handleKmlClick(event) {\n      const selectedSectorCode = event.feature.getProperty('name');\n      const areaAlreadyAdded = this.selectedAreas.some(area => area == selectedSectorCode);\n      if (!areaAlreadyAdded) {\n        this.selectedAreas.push(selectedSectorCode);\n        this.mapService.getSelectedArea$().next(this.selectedAreas);\n      }\n    }\n    loadGeoJsonMap(layerUrl) {\n      map = new google.maps.Map(document.getElementById('map'), this.options);\n      map.data.loadGeoJson(layerUrl, {\n        idPropertyName: 'Cidade'\n      }, geo => {\n        this.panelOpenState = true;\n        this.isLoading = false;\n        let cityLatLang;\n        // move to somewhere nearby the selected city\n        geo[0].getGeometry().forEachLatLng(latLang => {\n          // we can't get only the first latLng :/ So that's the workarround\n          if (!cityLatLang) {\n            cityLatLang = latLang;\n            map.panTo(cityLatLang);\n          }\n        });\n      });\n    }\n    onCityChange() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.selectedAreas = [];\n        const filePath = yield _this.dataService.getKmlFileUrl();\n        _this.startNewMap(filePath);\n      })();\n    }\n    static #_ = this.ɵfac = function MapComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MapComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.MapService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      decls: 9,\n      vars: 2,\n      consts: [[3, \"expandedChange\", \"expanded\"], [\"class\", \"loading-container\", 4, \"ngIf\"], [\"id\", \"map\"], [1, \"loading-container\"], [1, \"loading\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"mat-accordion\")(1, \"mat-expansion-panel\", 0);\n          i0.ɵɵtwoWayListener(\"expandedChange\", function MapComponent_Template_mat_expansion_panel_expandedChange_1_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.panelOpenState, $event) || (ctx.panelOpenState = $event);\n            return $event;\n          });\n          i0.ɵɵelementStart(2, \"mat-expansion-panel-header\")(3, \"mat-panel-title\");\n          i0.ɵɵtext(4, \" Mapa \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"mat-panel-description\");\n          i0.ɵɵtext(6, \" Regi\\u00F5es \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(7, MapComponent_div_7_Template, 4, 0, \"div\", 1);\n          i0.ɵɵelement(8, \"div\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtwoWayProperty(\"expanded\", ctx.panelOpenState);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i3.NgIf, i4.MatProgressSpinner, i5.MatAccordion, i5.MatExpansionPanel, i5.MatExpansionPanelHeader, i5.MatExpansionPanelTitle, i5.MatExpansionPanelDescription],\n      styles: [\".loading[_ngcontent-%COMP%]{margin:0 auto 12px}.loading-container[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:column}#map[_ngcontent-%COMP%]{height:400px;width:100%}\"]\n    });\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}